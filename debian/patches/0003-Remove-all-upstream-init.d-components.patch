From: Darik Horn <dajhorn@vanadac.com>
Date: Tue, 17 Jan 2012 11:54:21 -0600
Subject: Remove all upstream init.d components.

The etc/init.d/ components are redundant because the debian/ overlay
bundles init files according to Debian packaging policy.
---
 configure.ac             |    1 -
 etc/Makefile.am          |    2 +-
 etc/init.d/.gitignore    |    1 -
 etc/init.d/Makefile.am   |   22 -----
 etc/init.d/zfs.arch.in   |   62 ------------
 etc/init.d/zfs.fedora.in |  244 ----------------------------------------------
 etc/init.d/zfs.gentoo.in |  111 ---------------------
 etc/init.d/zfs.lsb.in    |  130 ------------------------
 etc/init.d/zfs.lunar.in  |   95 ------------------
 etc/init.d/zfs.redhat.in |  176 ---------------------------------
 10 files changed, 1 insertion(+), 843 deletions(-)
 delete mode 100644 etc/init.d/.gitignore
 delete mode 100644 etc/init.d/Makefile.am
 delete mode 100644 etc/init.d/zfs.arch.in
 delete mode 100644 etc/init.d/zfs.fedora.in
 delete mode 100644 etc/init.d/zfs.gentoo.in
 delete mode 100644 etc/init.d/zfs.lsb.in
 delete mode 100644 etc/init.d/zfs.lunar.in
 delete mode 100644 etc/init.d/zfs.redhat.in

--- a/configure.ac
+++ b/configure.ac
@@ -62,7 +62,6 @@
 	udev/Makefile
 	udev/rules.d/Makefile
 	etc/Makefile
-	etc/init.d/Makefile
 	etc/zfs/Makefile
 	etc/systemd/Makefile
 	etc/systemd/system/Makefile
--- a/etc/init.d/.gitignore
+++ /dev/null
@@ -1 +0,0 @@
-zfs
--- a/etc/init.d/zfs.fedora.in
+++ /dev/null
@@ -1,243 +0,0 @@
-#!/bin/bash
-#
-# zfs           This script will mount/umount the zfs filesystems.
-#
-# chkconfig:    2345 01 99
-# description:  This script will mount/umount the zfs filesystems during
-#               system boot/shutdown.  Configuration of which filesystems
-#               should be mounted is handled by the zfs 'mountpoint' and
-#               'canmount' properties.  See the zfs(8) man page for details.
-#               It is also responsible for all userspace zfs services.
-#
-### BEGIN INIT INFO
-# Provides: zfs
-# Required-Start:
-# Required-Stop:
-# Should-Start:
-# Should-Stop:
-# Default-Start: 2 3 4 5
-# Default-Stop: 1
-# Short-Description: Mount/umount the zfs filesystems
-# Description: ZFS is an advanced filesystem designed to simplify managing
-#              and protecting your data.  This service mounts the ZFS
-#              filesystems and starts all related zfs services.
-### END INIT INFO
-
-export PATH=/usr/local/sbin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin
-
-if [ -z "$init" ]; then
-    # Not interactive
-    grep -qE '(^|[^\\](\\\\)* )zfs=(off|no)( |$)' /proc/cmdline && exit 3
-fi
-
-# Source function library & LSB routines
-. /etc/rc.d/init.d/functions
-
-# script variables
-RETVAL=0
-ZFS="@sbindir@/zfs"
-ZPOOL="@sbindir@/zpool"
-ZPOOL_CACHE="@sysconfdir@/zfs/zpool.cache"
-servicename=zfs
-LOCKFILE=/var/lock/subsys/$servicename
-
-# functions
-zfs_installed() {
-	modinfo zfs > /dev/null 2>&1 || return 5
-	$ZPOOL  > /dev/null 2>&1
-	[ $? == 127 ] && return 5
-	$ZFS    > /dev/null 2>&1
-	[ $? == 127 ] && return 5
-	return 0
-}
-
-reregister_mounts() {
-	cat /etc/mtab | while read -r fs mntpnt fstype opts rest ; do
-		fs=`printf '%b\n' "$fs"`
-		mntpnt=`printf '%b\n' "$mntpnt"`
-		if [ "$fstype" == "zfs" ] ; then
-			if [ "$mntpnt" == "/" ] ; then
-				mount -f -o zfsutil -t zfs --move / /removethismountpointhoweverpossible
-				umount --fake /removethismountpointhoweverpossible
-			else
-				umount --fake "$mntpnt"
-			fi
-		elif echo "$fs" | grep -q "^/dev/zd" ; then
-			if [ "$mntpnt" == "/" ] ; then
-				mount -f -t "$fstype" --move / /removethismountpointhoweverpossible
-				umount --fake /removethismountpointhoweverpossible
-			else
-				umount --fake "$mntpnt"
-			fi
-		fi
-	done
-	cat /proc/mounts | while read -r fs mntpnt fstype opts rest ; do
-		fs=`printf '%b\n' "$fs"`
-		mntpnt=`printf '%b\n' "$mntpnt"`
-		if [ "$fstype" == "zfs" ] ; then
-			mount -f -t zfs -o zfsutil "$fs" "$mntpnt"
-		elif echo "$fs" | grep -q "^/dev/zd" ; then
-			mount -f -t "$fstype" -o "$opts" "$fs" "$mntpnt"
-		fi
-	done
-}
-
-# i need a bash guru to simplify this, since this is copy and paste, but donno how
-# to correctly dereference variable names in bash, or how to do this right
-
-declare -A MTAB
-declare -A FSTAB
-
-# first parameter is a regular expression that filters mtab
-read_mtab() {
-        for fs in "${!MTAB[@]}" ; do unset MTAB["$fs"] ; done
-        while read -r fs mntpnt fstype opts blah ; do
-                fs=`printf '%b\n' "$fs"`
-                MTAB["$fs"]=$mntpnt
-        done < <(grep "$1" /etc/mtab)
-}
-
-in_mtab() {
-        [ "${MTAB[$1]}" != "" ]
-        return $?
-}
-
-# first parameter is a regular expression that filters fstab
-read_fstab() {
-        for fs in "${!FSTAB[@]}" ; do unset FSTAB["$fs"] ; done
-        while read -r fs mntpnt fstype opts blah ; do
-                fs=`printf '%b\n' "$fs"`
-                FSTAB["$fs"]=$mntpnt
-        done < <(grep "$1" /etc/fstab)
-}
-
-in_fstab() {
-        [ "${FSTAB[$1]}" != "" ]
-        return $?
-}
-
-start()
-{
-	if [ -f "$LOCKFILE" ] ; then return 0 ; fi
-
-	# check if ZFS is installed.  If not, comply to FC standards and bail
-	zfs_installed || {
-		action $"Checking if ZFS is installed: not installed" /bin/false
-		return 5
-	}
-
-	# Delay until all required block devices are present.
-	udevadm settle
-
-	# load kernel module infrastructure
-	if ! grep -q zfs /proc/modules ; then
-		action $"Loading kernel ZFS infrastructure: " modprobe zfs || return 5
-	fi
-
-	# fix mtab to include already-mounted fs filesystems, in case there are any
-	# we ONLY do this if mtab does not point to /proc/mounts
-	# which is the case in some systems (systemd may bring that soon)
-	if ! readlink /etc/mtab | grep -q /proc ; then
-		if grep -qE "(^/dev/zd| zfs )" /proc/mounts ; then
-			action $"Registering already-mounted ZFS filesystems and volumes: " reregister_mounts || return 150
-		fi
-	fi
-
-        if [ -f $ZPOOL_CACHE ] ; then
-
-		echo -n $"Importing ZFS pools not yet imported: "
-		$ZPOOL import -c $ZPOOL_CACHE -aN || true # stupid zpool will fail if all pools are already imported
-		RETVAL=$?
-		if [ $RETVAL -ne 0 ]; then
-			failure "Importing ZFS pools not yet imported: "
-			return 151
-		fi
-		success "Importing ZFS pools not yet imported: "
-
-	fi
-
-	action $"Mounting ZFS filesystems not yet mounted: " $ZFS mount -a || return 152
-
-	action $"Exporting ZFS filesystems: " $ZFS share -a || return 153
-
-	read_mtab  "^/dev/zd"
-	read_fstab "^/dev/zd"
-
-	template=$"Mounting volume %s registered in fstab: "
-	for volume in "${!FSTAB[@]}" ; do
-		if in_mtab "$volume" ; then continue ; fi
-		string=`printf "$template" "$volume"`
-		action "$string" mount "$volume"
-	done
-
-	touch "$LOCKFILE"
-}
-
-stop()
-{
-	if [ ! -f "$LOCKFILE" ] ; then return 0 ; fi
-
-	# check if ZFS is installed.  If not, comply to FC standards and bail
-	zfs_installed || {
-		action $"Checking if ZFS is installed: not installed" /bin/false
-		return 5
-	}
-
-	# the poweroff of the system takes care of this
-	# but it never unmounts the root filesystem itself
-	# shit
-
-	action $"Syncing ZFS filesystems: " sync
-	     # about the only thing we can do, and then we
-	     # hope that the umount process will succeed
-	     # unfortunately the umount process does not dismount
-	     # the root file system, there ought to be some way
-	     # we can tell zfs to just flush anything in memory
-	     # when a request to remount,ro comes in
-
-	#echo -n $"Unmounting ZFS filesystems: "
-	#$ZFS umount -a
-	#RETVAL=$?
-	#if [ $RETVAL -ne 0 ]; then
-	#	failure
-
-	#	return 8
-	#fi
-	#success
-
-	rm -f "$LOCKFILE"
-}
-
-# See how we are called
-case "$1" in
-	start)
-		start
-		RETVAL=$?
-		;;
-	stop)
-		stop
-		RETVAL=$?
-		;;
-	status)
-		lsmod | grep -q zfs || RETVAL=3
-		$ZPOOL status && echo && $ZFS list || {
-			[ -f "$LOCKFILE" ] && RETVAL=2 || RETVAL=4
-		}
-		;;
-	restart)
-		stop
-		start
-		;;
-	condrestart)
-		if [ -f "$LOCKFILE" ] ; then
-			stop
-			start
-		fi
-		;;
-	*)
-		echo $"Usage: $0 {start|stop|status|restart|condrestart}"
-		RETVAL=3
-		;;
-esac
-
-exit $RETVAL
--- a/etc/init.d/zfs.gentoo.in
+++ /dev/null
@@ -1,124 +0,0 @@
-#!/sbin/runscript
-# Copyright 1999-2011 Gentoo Foundation
-# Released under the 2-clause BSD license.
-# $Header: /var/cvsroot/gentoo-x86/sys-fs/zfs/files/zfs,v 0.9 2011/04/30 10:13:43 devsk Exp $
-
-if [ -z "$init" ]; then
-    # Not interactive
-    grep -qE '(^|[^\\](\\\\)* )zfs=(off|no)( |$)' /proc/cmdline && exit 3
-fi
-
-depend()
-{
-	# Try to allow people to mix and match fstab with ZFS in a way that makes sense.
-	if [ "$(mountinfo -s /)" = 'zfs' ]
-	then
-		before localmount
-	else
-		after localmount
-	fi
-
-	# bootmisc will log to /var which may be a different zfs than root.
-	before bootmisc logger
-	use mtab
-	keyword -lxc -openvz -prefix -vserver
-}
-
-ZFS="@sbindir@/zfs"
-ZPOOL="@sbindir@/zpool"
-ZPOOL_CACHE="@sysconfdir@/zfs/zpool.cache"
-ZFS_MODULE=zfs
-
-checksystem() {
-	if [ ! -c /dev/zfs ]; then
-		einfo "Checking if ZFS modules present"
-		if ! modinfo zfs > /dev/null 2>&1 ; then
-			eerror "$ZFS_MODULE not found. Is the ZFS package installed?"
-			return 1
-		fi
-	fi
-	einfo "Checking if zfs userspace tools present"
-		if [ ! -x $ZPOOL ]; then
-			eerror "$ZPOOL binary not found."
-			return 1
-		fi
-		if [ ! -x $ZFS ]; then
-			eerror "$ZFS binary not found."
-			return 1
-		fi
-	return 0
-}
-
-start() {
-	ebegin "Starting ZFS"
-	checksystem || return 1
-
-	# Delay until all required block devices are present.
-	udevadm settle
-
-	if [ ! -c /dev/zfs ]; then
-		modprobe $ZFS_MODULE
-		rv=$?
-		if [ $rv -ne 0 ]; then
-			eerror "Failed to load the $ZFS_MODULE module, check 'dmesg|tail'."
-			eend $rv
-			return $rv
-		fi
-	fi
-
-	# Import all pools described by the cache file, and then mount
-	# all filesystem based on their properties.
-	if [ -f $ZPOOL_CACHE ]; then
-		einfo "Importing ZFS pools"
-		# as per fedora script, import can fail if all pools are already imported
-		# The check for $rv makes no sense...but someday, it will work right.
-		$ZPOOL import -c $ZPOOL_CACHE -aN 2>/dev/null || true
-		rv=$?
-		if [ $rv -ne 0 ]; then
-			eerror "Failed to import not-yet imported pools."
-			eend $rv
-			return $rv
-		fi
-	fi
-
-	einfo "Mounting ZFS filesystems"
-	$ZFS mount -a
-	rv=$?
-	if [ $rv -ne 0 ]; then
-		eerror "Failed to mount ZFS filesystems."
-		eend $rv
-		return $rv
-	fi
-
-	einfo "Exporting ZFS filesystems"
-	$ZFS share -a
-	rv=$?
-	if [ $rv -ne 0 ]; then
-		eerror "Failed to export ZFS filesystems."
-		eend $rv
-		return $rv
-	fi
-
-	eend 0
-	return 0
-}
-
-stop()
-{
-	ebegin "Unmounting ZFS filesystems"
-	$ZFS umount -a
-	rv=$?
-	if [ $rv -ne 0 ]; then
-		einfo "Some ZFS filesystems not unmounted"
-	fi
-
-	# Don't fail if we couldn't umount everything.  /usr might be in use.
-	eend 0
-	return 0
-}
-
-status()
-{
-	# show pool status and list
-	$ZPOOL status && echo && $ZPOOL list
-}
--- a/etc/init.d/zfs.lsb.in
+++ /dev/null
@@ -1,153 +0,0 @@
-#!/bin/bash
-#
-# zfs           This script will mount/umount the zfs filesystems.
-#
-# chkconfig:    2345 01 99
-# description:  This script will mount/umount the zfs filesystems during
-#               system boot/shutdown.  Configuration of which filesystems
-#               should be mounted is handled by the zfs 'mountpoint' and
-#               'canmount' properties.  See the zfs(8) man page for details.
-#               It is also responsible for all userspace zfs services.
-#
-### BEGIN INIT INFO
-# Provides: zfs
-# Required-Start: $local_fs
-# Required-Stop: $local_fs
-# Default-Start:     2 3 4 5
-# Default-Stop:      0 1 6
-# Should-Stop:
-# Short-Description: Mount/umount the zfs filesystems
-# Description: ZFS is an advanced filesystem designed to simplify managing
-#              and protecting your data.  This service mounts the ZFS
-#              filesystems and starts all related zfs services.
-### END INIT INFO
-
-# Source function library.
-. /lib/lsb/init-functions
-
-LOCKFILE=/var/lock/zfs
-ZFS="@sbindir@/zfs"
-ZPOOL="@sbindir@/zpool"
-ZPOOL_CACHE="@sysconfdir@/zfs/zpool.cache"
-USE_DISK_BY_ID=0
-VERBOSE_MOUNT=0
-DO_OVERLAY_MOUNTS=0
-MOUNT_EXTRA_OPTIONS=""
-
-# Source zfs configuration.
-[ -r '/etc/default/zfs' ] &&  . /etc/default/zfs
-
-[ -x "$ZPOOL" ] || exit 1
-[ -x "$ZFS" ] || exit 2
-
-if [ -z "$init" ]; then
-    # Not interactive
-    grep -qE '(^|[^\\](\\\\)* )zfs=(off|no)( |$)' /proc/cmdline && exit 3
-fi
-
-start()
-{
-	[ -f "$LOCKFILE" ] && return 3
-
-	# Delay until all required block devices are present.
-	udevadm settle
-
-	# Load the zfs module stack
-	/sbin/modprobe zfs
-
-	# Ensure / exists in /etc/mtab, if not update mtab accordingly.
-	# This should be handled by rc.sysinit but lets be paranoid.
-	awk '$2 == "/" { exit 1 }' /etc/mtab
-	RETVAL=$?
-	if [ "$RETVAL" -eq 0 ]; then
-		/bin/mount -f /
-	fi
-
-	# Import all pools described by the cache file, and then mount
-	# all filesystem based on their properties.
-	if [ "$USE_DISK_BY_ID" -eq 1 ]; then
-		log_begin_msg "Importing ZFS pools"
-		"$ZPOOL" import -d /dev/disk/by-id -aN 2>/dev/null
-		ret=$?
-		log_end_msg $ret
-		[ "$ret" -eq 0 ] && POOL_IMPORTED=1
-	elif [ -f "$ZPOOL_CACHE" ] ; then
-		log_begin_msg "Importing ZFS pools"
-		"$ZPOOL" import -c "$ZPOOL_CACHE" -aN 2>/dev/null
-		ret=$?
-		log_end_msg $ret
-		[ "$ret" -eq 0 ] && POOL_IMPORTED=1
-	fi
-
-	if [ -n "$POOL_IMPORTED" ]; then
-		if [ "$VERBOSE_MOUNT" -eq 1 ]; then
-			verbose=v
-		fi
-
-		if [ "$DO_OVERLAY_MOUNTS" -eq 1 ]; then
-			overlay=O
-		fi
-
-		log_begin_msg "Mounting ZFS filesystems"
-		"$ZFS" mount -a$verbose$overlay$MOUNT_EXTRA_OPTIONS
-		log_end_msg $?
-
-		log_begin_msg "Exporting ZFS filesystems"
-		"$ZFS" share -a
-		log_end_msg $?
-	fi
-
-	touch "$LOCKFILE"
-}
-
-stop()
-{
-	[ ! -f "$LOCKFILE" ] && return 3
-
-	log_begin_msg "Unsharing ZFS filesystems"
-	"$ZFS" unshare -a
-	log_end_msg $?
-
-	log_begin_msg "Unmounting ZFS filesystems"
-	"$ZFS" umount -a
-	log_end_msg $?
-
-	rm -f "$LOCKFILE"
-}
-
-status()
-{
-	[ ! -f "$LOCKFILE" ] && return 3
-
-	"$ZPOOL" status && echo "" && "$ZPOOL" list
-}
-
-case "$1" in
-	start)
-		start
-		RETVAL=$?
-		;;
-	stop)
-		stop
-		RETVAL=$?
-		;;
-	status)
-		status
-		RETVAL=$?
-		;;
-	restart)
-		stop
-		start
-		;;
-	condrestart)
-		if [ -f "$LOCKFILE" ]; then
-			stop
-			start
-		fi
-		;;
-	*)
-		echo $"Usage: $0 {start|stop|status|restart|condrestart}"
-		;;
-esac
-
-exit $RETVAL
--- a/etc/init.d/zfs.lunar.in
+++ /dev/null
@@ -1,100 +0,0 @@
-#!/bin/bash
-#
-# zfs           This shell script takes care of starting (mount) and
-#               stopping (umount) zfs shares.
-#
-# chkconfig: 35 60 40
-# description: ZFS is a filesystem developed by Sun, ZFS is a
-#              combined file system and logical volume manager
-#              designed by Sun Microsystems. Made available to Linux
-#              using SPL (Solaris Porting Layer) by zfsonlinux.org.
-# probe: true
-
-ZFS="@sbindir@/zfs"
-ZPOOL="@sbindir@/zpool"
-ZPOOL_CACHE="@sysconfdir@/zfs/zpool.cache"
-
-if [ -z "$init" ]; then
-    # Not interactive
-    grep -qE '(^|[^\\](\\\\)* )zfs=(off|no)( |$)' /proc/cmdline && exit 3
-fi
-
-case $1 in
-  start)  echo "$1ing ZFS filesystems"
-
-    # Delay until all required block devices are present.
-    udevadm settle
-
-    if ! grep "zfs" /proc/modules > /dev/null; then
-      echo "ZFS kernel module not loaded yet; loading...";
-      if ! modprobe zfs; then
-        echo "Failed to load ZFS kernel module...";
-        exit 0;
-      fi
-    fi
-
-    if ! [ `uname -m` == "x86_64" ]; then
-      echo "Warning: You're not running 64bit. Currently native zfs in";
-      echo "         linux is only supported and tested on 64bit.";
-      # should we break here? People doing this should know what they
-      # do, thus i'm not breaking here.
-    fi
-
-    # mount the filesystems
-    while IFS= read -r -d $'\n' dev; do
-      mdev=$(echo "$dev" | awk '{ print $1; }')
-      echo -n "mounting $mdev..."
-      if $ZFS mount $mdev; then
-        echo -e "done";
-      else
-        echo -e "failed";
-      fi
-    done < <($ZFS list -H);
-
-    # export the filesystems
-    echo -n "exporting ZFS filesystems..."
-    if $ZFS share -a; then
-      echo -e "done";
-    else
-      echo -e "failed";
-    fi
-
-
-  ;;
-
-  stop)  echo "$1ping ZFS filesystems"
-
-    if grep "zfs" /proc/modules > /dev/null; then
-      # module is loaded, so we can try to umount filesystems
-      while IFS= read -r -d $'\n' dev; do
-        mdev=$(echo "$dev" | awk '{ print $1 }');
-        echo -n "umounting $mdev...";
-        if $ZFS umount $mdev; then
-          echo -e "done";
-        else
-          echo -e "failed";
-        fi
-        # the next line is, because i have to reverse the
-        # output, otherwise it wouldn't work as it should
-      done < <($ZFS list -H | tac);
-
-      # and finally let's rmmod the module
-      rmmod zfs
-
-
-    else
-      # module not loaded, no need to umount anything
-      exit 0
-    fi
-
-  ;;
-
-  restart) echo "$1ing ZFS filesystems"
-    $0 stop
-    $0 start
-  ;;
-
-  *)  echo "Usage: $0 {start|stop|restart}"
-  ;;
-
-esac
--- a/etc/init.d/zfs.redhat.in
+++ /dev/null
@@ -1,175 +0,0 @@
-#!/bin/bash
-#
-# zfs           This script will mount/umount the zfs filesystems.
-#
-# chkconfig:    2345 01 99
-# description:  This script will mount/umount the zfs filesystems during
-#               system boot/shutdown.  Configuration of which filesystems
-#               should be mounted is handled by the zfs 'mountpoint' and
-#               'canmount' properties.  See the zfs(8) man page for details.
-#               It is also responsible for all userspace zfs services.
-#
-### BEGIN INIT INFO
-# Provides: zfs
-# Required-Start:
-# Required-Stop:
-# Should-Start:
-# Should-Stop:
-# Default-Start: 2 3 4 5
-# Default-Stop: 1
-# Short-Description: Mount/umount the zfs filesystems
-# Description: ZFS is an advanced filesystem designed to simplify managing
-#              and protecting your data.  This service mounts the ZFS
-#              filesystems and starts all related zfs services.
-### END INIT INFO
-
-export PATH=/usr/local/sbin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin
-
-if [ -z "$init" ]; then
-    # Not interactive
-    grep -qE '(^|[^\\](\\\\)* )zfs=(off|no)( |$)' /proc/cmdline && exit 3
-fi
-
-# Source function library & LSB routines
-. /etc/rc.d/init.d/functions
-
-# script variables
-RETVAL=0
-ZFS="@sbindir@/zfs"
-ZPOOL="@sbindir@/zpool"
-ZPOOL_CACHE="@sysconfdir@/zfs/zpool.cache"
-servicename=zfs
-LOCKFILE=/var/lock/subsys/$servicename
-
-# functions
-zfs_installed() {
-	modinfo zfs > /dev/null 2>&1 || return 5
-	$ZPOOL  > /dev/null 2>&1
-	[ $? == 127 ] && return 5
-	$ZFS    > /dev/null 2>&1
-	[ $? == 127 ] && return 5
-	return 0
-}
-
-# i need a bash guru to simplify this, since this is copy and paste, but donno how
-# to correctly dereference variable names in bash, or how to do this right
-
-# first parameter is a regular expression that filters fstab
-read_fstab() {
-        unset FSTAB
-	n=0
-        while read -r fs mntpnt fstype opts blah ; do
-                fs=`printf '%b\n' "$fs"`
-                FSTAB[$n]=$fs
-		let n++
-        done < <(egrep "$1" /etc/fstab)
-}
-
-start()
-{
-	# Disable lockfile check
-	# if [ -f "$LOCKFILE" ] ; then return 0 ; fi
-
-	# check if ZFS is installed.  If not, comply to FC standards and bail
-	zfs_installed || {
-		action $"Checking if ZFS is installed: not installed" /bin/false
-		return 5
-	}
-
-	# Delay until all required block devices are present.
-	if [ -x /sbin/udevadm ]; then
-		/sbin/udevadm settle
-	elif [ -x /sbin/udevsettle ]; then
-		/sbin/udevsettle
-	fi
-
-	# load kernel module infrastructure
-	if ! grep -q zfs /proc/modules ; then
-		action $"Loading kernel ZFS infrastructure: " modprobe zfs || return 5
-	fi
-	sleep 1
-
-	action $"Mounting automounted ZFS filesystems: " $ZFS mount -a || return 152
-
-	action $"Exporting ZFS filesystems: " $ZFS share -a || return 153
-
-	# Read fstab, try to mount zvols ignoring error
-	read_fstab "^/dev/(zd|zvol)"
-	template=$"Mounting volume %s registered in fstab: "
-	for volume in "${FSTAB[@]}" ; do
-		string=`printf "$template" "$volume"`
-		action "$string" mount "$volume" 2>/dev/null || /bin/true
-	done
-
-	# touch "$LOCKFILE"
-}
-
-stop()
-{
-	# Disable lockfile check
-	# if [ ! -f "$LOCKFILE" ] ; then return 0 ; fi
-
-	# check if ZFS is installed.  If not, comply to FC standards and bail
-	zfs_installed || {
-		action $"Checking if ZFS is installed: not installed" /bin/false
-		return 5
-	}
-
-	# the poweroff of the system takes care of this
-	# but it never unmounts the root filesystem itself
-	# shit
-
-	action $"Syncing ZFS filesystems: " sync
-	     # about the only thing we can do, and then we
-	     # hope that the umount process will succeed
-	     # unfortunately the umount process does not dismount
-	     # the root file system, there ought to be some way
-	     # we can tell zfs to just flush anything in memory
-	     # when a request to remount,ro comes in
-
-	#echo -n $"Unmounting ZFS filesystems: "
-	#$ZFS umount -a
-	#RETVAL=$?
-	#if [ $RETVAL -ne 0 ]; then
-	#	failure
-
-	#	return 8
-	#fi
-	#success
-
-	rm -f "$LOCKFILE"
-}
-
-# See how we are called
-case "$1" in
-	start)
-		start
-		RETVAL=$?
-		;;
-	stop)
-		stop
-		RETVAL=$?
-		;;
-	status)
-		lsmod | grep -q zfs || RETVAL=3
-		$ZPOOL status && echo && $ZFS list || {
-			[ -f "$LOCKFILE" ] && RETVAL=2 || RETVAL=4
-		}
-		;;
-	restart)
-		stop
-		start
-		;;
-	condrestart)
-		if [ -f "$LOCKFILE" ] ; then
-			stop
-			start
-		fi
-		;;
-	*)
-		echo $"Usage: $0 {start|stop|status|restart|condrestart}"
-		RETVAL=3
-		;;
-esac
-
-exit $RETVAL
--- a/etc/init.d/Makefile.am
+++ /dev/null
@@ -1,21 +0,0 @@
-initdir = $(DEFAULT_INIT_DIR)
-init_SCRIPTS = zfs
-
-EXTRA_DIST = \
-	$(top_srcdir)/etc/init.d/zfs.fedora.in \
-	$(top_srcdir)/etc/init.d/zfs.gentoo.in \
-	$(top_srcdir)/etc/init.d/zfs.lsb.in \
-	$(top_srcdir)/etc/init.d/zfs.lunar.in \
-	$(top_srcdir)/etc/init.d/zfs.redhat.in
-
-$(init_SCRIPTS):
-	-$(SED) -e 's,@bindir\@,$(bindir),g' \
-		-e 's,@sbindir\@,$(sbindir),g' \
-		-e 's,@udevdir\@,$(udevdir),g' \
-		-e 's,@udevruledir\@,$(udevruledir),g' \
-		-e 's,@sysconfdir\@,$(sysconfdir),g' \
-		-e 's,@initdir\@,$(initdir),g' \
-		'$@.$(DEFAULT_INIT_SCRIPT).in' >'$@'
-
-distclean-local::
-	-$(RM) $(init_SCRIPTS)
--- a/etc/Makefile.am
+++ b/etc/Makefile.am
@@ -1,2 +1,2 @@
-SUBDIRS = zfs $(ZFS_INIT_SYSTEMD) $(ZFS_INIT_SYSV) $(ZFS_MODULE_LOAD)
-DIST_SUBDIRS = init.d zfs systemd modules-load.d
+SUBDIRS = zfs $(ZFS_INIT_SYSTEMD) $(ZFS_MODULE_LOAD)
+DIST_SUBDIRS = zfs systemd modules-load.d
